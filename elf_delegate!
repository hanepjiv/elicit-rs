[1mdiff --git a/src/aelicit.rs b/src/aelicit.rs[m
[1mindex 5093961..523305f 100644[m
[1m--- a/src/aelicit.rs[m
[1m+++ b/src/aelicit.rs[m
[36m@@ -6,7 +6,7 @@[m
 //  @author hanepjiv <hanepjiv@gmail.com>[m
 //  @copyright The MIT License (MIT) / Apache License Version 2.0[m
 //  @since 2016/08/18[m
[31m-//  @date 2017/01/09[m
[32m+[m[32m//  @date 2017/01/12[m
 [m
 //! # Examples[m
 //![m
[36m@@ -31,8 +31,7 @@[m
 //!     my_field:     i32,[m
 //! }[m
 //! impl MyTraitEnableAelicitFromSelf for MyStruct {[m
[31m-//!     enable_aelicit_from_self_impl!(MyTrait, MyTraitAelicit,[m
[31m-//!                                          _eefsf);[m
[32m+[m[32m//!     enable_aelicit_from_self_delegate!(MyTrait, MyTraitAelicit, _eefsf);[m
 //! }[m
 //! impl MyTrait for MyStruct {[m
 //!     fn my_function(&self) -> i32 { self.my_field }[m
[36m@@ -43,7 +42,7 @@[m
 //!     my_field:     i32,[m
 //! }[m
 //! impl MyTraitEnableAelicitFromSelf for MyStructUnuseEnableAelicitFromSelf {[m
[31m-//!     enable_aelicit_from_self_impl!(MyTrait, MyTraitAelicit);[m
[32m+[m[32m//!     enable_aelicit_from_self_delegate!(MyTrait, MyTraitAelicit);[m
 //! }[m
 //! impl MyTrait for MyStructUnuseEnableAelicitFromSelf {[m
 //!     fn my_function(&self) -> i32 { self.my_field }[m
[36m@@ -241,9 +240,9 @@[m [mmacro_rules! aelicit_define {[m
     };[m
 }[m
 // ============================================================================[m
[31m-/// enable_aelicit_from_self_impl[m
[32m+[m[32m/// enable_aelicit_from_self_delegate[m
 #[macro_export][m
[31m-macro_rules! enable_aelicit_from_self_impl {[m
[32m+[m[32mmacro_rules! enable_aelicit_from_self_delegate {[m
     // ========================================================================[m
     ($base:ident, $aelicit:ident)                => {  // empty[m
         // --------------------------------------------------------------------[m
[36m@@ -305,7 +304,7 @@[m [mmod tests {[m
     }[m
     // ========================================================================[m
     impl EnableAelicitFromSelfT0 for S0 {[m
[31m-        enable_aelicit_from_self_impl!(T0, AelicitT0, _eefsf);[m
[32m+[m[32m        enable_aelicit_from_self_delegate!(T0, AelicitT0, _eefsf);[m
     }[m
     // ========================================================================[m
     impl S0 {[m
[36m@@ -331,7 +330,7 @@[m [mmod tests {[m
     }[m
     // ========================================================================[m
     impl EnableAelicitFromSelfT0 for S1 {[m
[31m-        enable_aelicit_from_self_impl!(T0, AelicitT0);[m
[32m+[m[32m        enable_aelicit_from_self_delegate!(T0, AelicitT0);[m
     }[m
     // ========================================================================[m
     impl S1 {[m
[1mdiff --git a/src/elicit.rs b/src/elicit.rs[m
[1mindex 05ccbc4..32363ae 100644[m
[1m--- a/src/elicit.rs[m
[1m+++ b/src/elicit.rs[m
[36m@@ -6,7 +6,7 @@[m
 //  @author hanepjiv <hanepjiv@gmail.com>[m
 //  @copyright The MIT License (MIT) / Apache License Version 2.0[m
 //  @since 2016/08/18[m
[31m-//  @date 2017/01/09[m
[32m+[m[32m//  @date 2017/01/12[m
 [m
 //! # Examples[m
 //![m
[36m@@ -31,7 +31,7 @@[m
 //!     my_field:     i32,[m
 //! }[m
 //! impl MyTraitEnableElicitFromSelf for MyStruct {[m
[31m-//!     enable_elicit_from_self_impl!(MyTrait, MyTraitElicit, _eefsf);[m
[32m+[m[32m//!     enable_elicit_from_self_delegate!(MyTrait, MyTraitElicit, _eefsf);[m
 //! }[m
 //! impl MyTrait for MyStruct {[m
 //!     fn my_function(&self) -> i32 { self.my_field }[m
[36m@@ -42,7 +42,7 @@[m
 //!     my_field:     i32,[m
 //! }[m
 //! impl MyTraitEnableElicitFromSelf for MyStructUnuseEnableElicitFromSelf {[m
[31m-//!     enable_elicit_from_self_impl!(MyTrait, MyTraitElicit);[m
[32m+[m[32m//!     enable_elicit_from_self_delegate!(MyTrait, MyTraitElicit);[m
 //! }[m
 //! impl MyTrait for MyStructUnuseEnableElicitFromSelf {[m
 //!     fn my_function(&self) -> i32 { self.my_field }[m
[36m@@ -136,18 +136,18 @@[m [mmacro_rules! elicit_define {[m
                 // ============================================================[m
                 /// with[m
                 pub fn with<R, F>(&self, f: F) -> Result<R>[m
[31m-                where F:                FnOnce(&$base) -> Result<R>,[m
[31m-        $base:  Debug + EnableElicitFromSelf,   {[m
[31m-            let &Elicit(ref inner) = self;[m
[31m-            f(&(*(*(inner.as_ref().borrow())))).map_err([m
[31m-                |e| -> Box<StdError> {[m
[31m-                      Box::new(Error::Function(e))[m
[31m-            })[m
[31m-    }[m
[31m-    // ========================================================================[m
[31m-    /// with_mut[m
[31m-    pub fn with_mut<R, F>(&self, f: F) -> Result<R>[m
[31m-    where F:            FnOnce(&mut $base) -> Result<R>,[m
[32m+[m[32m                    where F:            FnOnce(&$base) -> Result<R>,[m
[32m+[m[32m                          $base:        Debug + EnableElicitFromSelf,   {[m
[32m+[m[32m                    let &Elicit(ref inner) = self;[m
[32m+[m[32m                    f(&(*(*(inner.as_ref().borrow())))).map_err([m
[32m+[m[32m                        |e| -> Box<StdError> {[m
[32m+[m[32m                            Box::new(Error::Function(e))[m
[32m+[m[32m                        })[m
[32m+[m[32m                }[m
[32m+[m[32m                // ========================================================================[m
[32m+[m[32m                /// with_mut[m
[32m+[m[32m                pub fn with_mut<R, F>(&self, f: F) -> Result<R>[m
[32m+[m[32m                    where F:            FnOnce(&mut $base) -> Result<R>,[m
                           $base:        Debug + EnableElicitFromSelf,   {[m
                     let &Elicit(ref inner) = self;[m
                     f(&mut(*(*(inner.as_ref().borrow_mut())))).map_err([m
[36m@@ -160,9 +160,9 @@[m [mmacro_rules! elicit_define {[m
     };[m
 }[m
 // ============================================================================[m
[31m-/// enable_elicit_from_self_impl[m
[32m+[m[32m/// enable_elicit_from_self_delegate[m
 #[macro_export][m
[31m-macro_rules! enable_elicit_from_self_impl {[m
[32m+[m[32mmacro_rules! enable_elicit_from_self_delegate {[m
     // ========================================================================[m
     ($base:ident, $elicit:ident)                => {  // empty[m
         // --------------------------------------------------------------------[m
[36m@@ -224,7 +224,7 @@[m [mmod tests {[m
     }[m
     // ========================================================================[m
     impl EnableElicitFromSelfT0 for S0 {[m
[31m-        enable_elicit_from_self_impl!(T0, ElicitT0, _eefsf);[m
[32m+[m[32m        enable_elicit_from_self_delegate!(T0, ElicitT0, _eefsf);[m
     }[m
     // ========================================================================[m
     impl S0 {[m
[36m@@ -250,7 +250,7 @@[m [mmod tests {[m
     }[m
     // ========================================================================[m
     impl EnableElicitFromSelfT0 for S1 {[m
[31m-        enable_elicit_from_self_impl!(T0, ElicitT0);[m
[32m+[m[32m        enable_elicit_from_self_delegate!(T0, ElicitT0);[m
     }[m
     // ========================================================================[m
     impl S1 {[m
[1mdiff --git a/src/lib.rs b/src/lib.rs[m
[1mindex 0ab2b08..ebd9709 100644[m
[1m--- a/src/lib.rs[m
[1m+++ b/src/lib.rs[m
[36m@@ -6,7 +6,7 @@[m
 //  @author hanepjiv <hanepjiv@gmail.com>[m
 //  @copyright The MIT License (MIT) / Apache License Version 2.0[m
 //  @since 2016/03/08[m
[31m-//  @date 2017/01/09[m
[32m+[m[32m//  @date 2017/01/11[m
 [m
 // ////////////////////////////////////////////////////////////////////////////[m
 // attribute  =================================================================[m
[36m@@ -67,13 +67,13 @@[m
     unused_parens,[m
     unused_unsafe,[m
     unknown_crate_types,[m
[31m-)][m
[31m-#![warn([m
[31m-    dead_code,[m
     missing_copy_implementations,[m
     missing_debug_implementations,[m
     unused_variables,[m
 )][m
[32m+[m[32m#![warn([m
[32m+[m[32m    dead_code,[m
[32m+[m[32m)][m
 #![allow([m
     box_pointers,[m
     unsafe_code,[m
